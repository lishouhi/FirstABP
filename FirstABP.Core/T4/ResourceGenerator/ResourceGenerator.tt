<#@ template language="C#" hostspecific="True"#>
<#@include file="ResourceGenerator.ttinclude"#>
<#@ output extension=".log"#>
<# var manager = Manager.Create(Host, GenerationEnvironment);

foreach(var resource in Resources.Named(new [] { "Sample" }, Path.GetDirectoryName(Host.TemplateFile), ".resx")) {
    manager.StartNewFile(resource.Name + ".generated.cs");
#>namespace <#=manager.DefaultProjectNamespace#>
{
	using System;
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("T4 based resource generator", "0.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class <#=resource.Name#>
    {
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Sample() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("<#=manager.DefaultProjectNamespace#>.<#=resource.Name#>", typeof(<#=resource.Name#>).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }

<#      foreach(var entry in resource.Entries) {#>
        /// <summary>
        ///   Looks up a localized string similar to <#=entry.Value#>.
        /// </summary>
        internal static string <#=entry.PropertyName#> { get { return ResourceManager.GetString("<#=entry.KeyName#>", resourceCulture); } }
<#      } #>
    }
}<# manager.EndBlock();
}
manager.Process(true); #>
T4 based resource generator
<# foreach(var line in manager.GeneratedFileNames) { #>
    Generated <#=Path.GetFileName(line)#>
<# } #>